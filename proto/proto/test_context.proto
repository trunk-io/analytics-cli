syntax = "proto3";

import "google/protobuf/timestamp.proto";

package test_context.test_run;

enum TestCaseRunStatus {
  TEST_CASE_RUN_STATUS_UNSPECIFIED = 0;
  TEST_CASE_RUN_STATUS_SUCCESS = 1;
  TEST_CASE_RUN_STATUS_FAILURE = 2;
  TEST_CASE_RUN_STATUS_SKIPPED = 3;
}

message CodeOwner {
  string name = 1;
}

message TestCaseRun {
  string id = 1;
  string name = 2;
  string classname = 3;
  string file = 4;
  string parent_name = 5;
  int32 line = 6;
  TestCaseRunStatus status = 7;
  int32 attempt_number = 8;
  google.protobuf.Timestamp started_at = 9;
  google.protobuf.Timestamp finished_at = 10;
  string status_output_message = 11;
  bool is_quarantined = 12;
  repeated CodeOwner codeowners = 13;
}

message UploaderMetadata {
  string version = 1;
  string origin = 2; // RSpec, jest, etc..
  google.protobuf.Timestamp upload_time = 3;
  string variant = 4;
}

message BazelBuildInformation {
  string label = 1; // test label for the execution 
  TestBuildResult result = 2; // result of the build
}

message TestResult {
  repeated TestCaseRun test_case_runs = 1;
  // use the uplaoder metadata in test report instead
  UploaderMetadata uploader_metadata = 2 [deprecated = true];;
  oneof test_build_information {
    BazelBuildInformation bazel_build_information = 3;
    // Other build information can be added here in the future
  }
}

enum TestBuildResult {
  TEST_BUILD_RESULT_UNSPECIFIED = 0;
  TEST_BUILD_RESULT_SUCCESS = 1;
  TEST_BUILD_RESULT_FAILURE = 2;
  TEST_BUILD_RESULT_SKIPPED = 3;
}

message TestReport {
  repeated TestResult test_results = 1;
  UploaderMetadata uploader_metadata = 2;
}
